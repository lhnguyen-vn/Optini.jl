var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Optini","category":"page"},{"location":"#Optini","page":"Home","title":"Optini","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Optini]","category":"page"},{"location":"#Optini.AbstractAlgorithm","page":"Home","title":"Optini.AbstractAlgorithm","text":"AbstractAlgorithm\n\nAbstract supertype of all optimization algorithms.\n\n\n\n\n\n","category":"type"},{"location":"#Optini.BacktrackingLineSearch","page":"Home","title":"Optini.BacktrackingLineSearch","text":"BacktrackingLineSearch{C, T}\n\nBacktrackingLineSearch starts from an initial step length guess and gradually backtracks  until the Armijo sufficient decrease condition is met.\n\nFields\n\nc::C: the constant for the Armijo condition in the open interval (0, 1)\nscale::T: the scale factor to shrink the step length\n\n\n\n\n\n","category":"type"},{"location":"#Optini.BacktrackingLineSearch-Tuple{}","page":"Home","title":"Optini.BacktrackingLineSearch","text":"BacktrackingLineSearch(; kwargs...)\n\nInitiate BacktrackingLineSearch.\n\nKeywords\n\nc=1e-4: the constant for the Armijo condition in the open interval (0, 1)\nscale=0.5: the scale factor to shrink the step length\n\n\n\n\n\n","category":"method"},{"location":"#Optini.Bisection","page":"Home","title":"Optini.Bisection","text":"Bisection <: UnivariateAlgorithm\n\nBisection search is a root-finding algorithm by maintainining a bracket of opposing  derivative signs. At each iteration the algorithm shrinks the bracket by half until a critical point is located or the bracket is sufficiently small. \n\n\n\n\n\n","category":"type"},{"location":"#Optini.ExactLineSearch","page":"Home","title":"Optini.ExactLineSearch","text":"ExactLineSearch{A<:UnivariateAlgorithm, O1, O2}\n\nExactLineSearch computes the optimal step length using univariate methods. Since most  univariate algorithms require repeated calculations of the objective to shrink the bracket around a local minimum, ExactLineSearch is expected to be expensive.\n\nFields\n\nalg::A: the univariate algorithm\nbracket_options::O1: named tuple of bracketing options\nalg_options::O2: named tuple of the univariate algorithm options\n\n\n\n\n\n","category":"type"},{"location":"#Optini.ExactLineSearch-Tuple{}","page":"Home","title":"Optini.ExactLineSearch","text":"ExactLineSearch(; kwargs...)\n\nInitiate a ExactLineSearch. Use keyword arguments to tweak the bracketing phase and the  univariate algorithm.\n\nKeywords\n\nalg::UnivariateAlgorithm: the univariate algorithm to optimize the step length\nstep=0.01: bracketing step size\nscale=2.0: bracketing scale factor\nbracket_maxiter::Integer=100: bracketing maximum number of iterations\nreltol=1e-6: relative tolerance\nabstol=1e-12: absolute tolerance\nmaxiter::Integer=1_000: maximum number of iterations\n\n\n\n\n\n","category":"method"},{"location":"#Optini.Fibonacci","page":"Home","title":"Optini.Fibonacci","text":"Fibonacci{T} <: UnivariateAlgorithm\n\nThe Fibonacci search algorithm optimize a univariate function by iteratively shrinking the  initial bracket around the minimum. The ratio is computed from the Fibonacci sequence.\n\n\n\n\n\n","category":"type"},{"location":"#Optini.Fibonacci-2","page":"Home","title":"Optini.Fibonacci","text":"Fibonacci([ϵ=0.01])\n\nInitialize Fibonacci search algorithm with optional argument ϵ in the interval (0, 1) to control how close the last iterate is to the previous one. Refer to Kochenderfer and  Wheeler's \"Algorithms for Optimization\" for more information.\n\n\n\n\n\n","category":"type"},{"location":"#Optini.GoldenSection","page":"Home","title":"Optini.GoldenSection","text":"GoldenSection <: UnivariateAlgorithm\n\nThe golden section search algorithm optimize a univariate function by iteratively shrinking  the initial bracket around the minimum with the golden ratio as an approximation to the  Fibonacci sequence.\n\n\n\n\n\n","category":"type"},{"location":"#Optini.GradientDescent","page":"Home","title":"Optini.GradientDescent","text":"GradientDescent{I, M}\n\nAliasing LineSearch with steepest descent.\n\n\n\n\n\n","category":"type"},{"location":"#Optini.GradientDescent-Tuple{Any,Any}","page":"Home","title":"Optini.GradientDescent","text":"GradientDescent(initial, method)\n\nInitiate GradientDescent.\n\nArguments\n\ninitial: starts line search with an initial step length guess\nmethod: computes the appropriate next step\n\n\n\n\n\n","category":"method"},{"location":"#Optini.GradientDescent-Tuple{}","page":"Home","title":"Optini.GradientDescent","text":"GradientDescent(; kwargs...)\n\nInitiate GradientDescent.\n\nKeywords\n\ninitial=StaticInitial(0.001): starts line search with an initial step length guess\nmethod=StaticLineSearch(): computes the appropriate next step\n\n\n\n\n\n","category":"method"},{"location":"#Optini.InterpolationLineSearch","page":"Home","title":"Optini.InterpolationLineSearch","text":"InterpolationLineSearch{C, T}\n\nInterpolationLineSearch uses quadratic and cubic interpolations to compute the step length satisfying the Armijo sufficient decrease condition.\n\nFields\n\nc::C: the constant for the Armijo condition in the open interval (0, 1)\nϵ::T: the minimum step length decrease from the initial step length\n\n\n\n\n\n","category":"type"},{"location":"#Optini.InterpolationLineSearch-Tuple{}","page":"Home","title":"Optini.InterpolationLineSearch","text":"InterpolationLineSearch(; kwargs...)\n\nInitiate InterpolationLineSearch.\n\nKeywords\n\nc=1e-4: the constant for the Armijo condition in the open interval (0, 1)\nϵ=1e-6: the minimum step length decrease from the initial step length\n\n\n\n\n\n","category":"method"},{"location":"#Optini.LineSearch","page":"Home","title":"Optini.LineSearch","text":"LineSearch{D, I, M} <: MultivariateAlgorithm\n\nLineSearch optimizes the objective function by first choosing a direction, then search  along this direction for an appropriate step. \n\nFields\n\ndirection::D: determines the search direction\ninitial::I: the method to guess an initial step length\nmethod::: the method to compute the appropriate next step\n\n\n\n\n\n","category":"type"},{"location":"#Optini.LineSearch-Tuple{}","page":"Home","title":"Optini.LineSearch","text":"LineSearch(; kwargs...)\n\nInitiate LineSearch algorithm.\n\nKeywords\n\ndirection=Steepest(): determines the search direction\ninitial=StaticInitial(1.0): the method to guess an initial step length\nmethod=BacktrackingLineSearch(): the method to compute the appropriate next step\n\n\n\n\n\n","category":"method"},{"location":"#Optini.MultipleIdentity","page":"Home","title":"Optini.MultipleIdentity","text":"MultipleIdentity{B, S}\n\nModify the Hessian by adding some multiples, τ, of the identity matrix, as described in  Nocedal and Wright's Numerical Optimization.\n\nFields\n\nβ::B: constant to compute appropriate τ\nscale::S: scale factor to expand τ\n\n\n\n\n\n","category":"type"},{"location":"#Optini.MultipleIdentity-Tuple{}","page":"Home","title":"Optini.MultipleIdentity","text":"MultipleIdentity(; beta=1e-3, scale=2.0)\n\nInitiate MultipleIdentity method to modify the Hessian.\n\n\n\n\n\n","category":"method"},{"location":"#Optini.MultivariateAlgorithm","page":"Home","title":"Optini.MultivariateAlgorithm","text":"MultivariateAlgorithm\n\nAbstract supertype of multivariate optimization algorithms.\n\n\n\n\n\n","category":"type"},{"location":"#Optini.Newton","page":"Home","title":"Optini.Newton","text":"Newton{M}\n\nNewton dispatches to the Newton direction for LineSearch algorithm and uses the Hessian  in TrustRegion models.\n\nFields\n\nmodify::M: the Hessian modification method to enforce positive definiteness\n\n\n\n\n\n","category":"type"},{"location":"#Optini.PreviousDecreaseInitial","page":"Home","title":"Optini.PreviousDecreaseInitial","text":"PreviousDecreaseInitial{T, D<:Ref} <: AbstractInitial{T}\n\nPreviousDecreaseInitial assumes the first-order decrease is the same as the previous iteration:\n\nα₀ = αₖ₁fracf^intercal_k-1 p_k-1f^intercal_k p_k\n\nFields\n\nα::T: default step length for the first iteration\nprev_decrease::D: save the last iteration's first-order decrease\n\n\n\n\n\n","category":"type"},{"location":"#Optini.PreviousDecreaseInitial-Union{Tuple{}, Tuple{T}} where T","page":"Home","title":"Optini.PreviousDecreaseInitial","text":"PreviousDecreaseInitial([α::T=1.0]) where {T}\n\nInitialize PreviousDecreaseInitial, with prev_decrease defaulting to Ref(T(NaN)).\n\n\n\n\n\n","category":"method"},{"location":"#Optini.QuadraticFit","page":"Home","title":"Optini.QuadraticFit","text":"QuadraticFit{T} <: UnivariateAlgorithm\n\nThe quadratic fit algorithm constructs a quadratic function from three points at each iteration as an approximation to the objective. The analytical solution to the quadratic  model is examined as the new minimizer candidate to update the three points. \n\n\n\n\n\n","category":"type"},{"location":"#Optini.QuadraticFit-2","page":"Home","title":"Optini.QuadraticFit","text":"QuadraticFit([ϵ=0.01])\n\nInitialize quadratic fit search algorithm with optional argument ϵ in the interval  (0, 1) to choose a midpoint as mid = ϵ * lower + (1 - ϵ) * upper.\n\n\n\n\n\n","category":"type"},{"location":"#Optini.QuadraticInitial","page":"Home","title":"Optini.QuadraticInitial","text":"QuadraticInitial{T} <: AbstractInitial{T}\n\nQuadraticInitial assumes ϕ(α₀) - ϕ(0) = fₖ - fₖ₁ and uses quadratic interpolation with ϕ(α₀), ϕ(0), ϕ(0) to compute the initial guess.\n\nFields\n\nα::T: default step length for the first iteration\nprev_f::Ref{T}: save the last iteration's function value\n\n\n\n\n\n","category":"type"},{"location":"#Optini.QuadraticInitial-Union{Tuple{}, Tuple{T}} where T","page":"Home","title":"Optini.QuadraticInitial","text":"QuadraticInitial([α::T=1.0]) where {T}\n\nInitialize QuadraticInitial, with prev_f defaulting to Ref(T(NaN)).\n\n\n\n\n\n","category":"method"},{"location":"#Optini.Solution","page":"Home","title":"Optini.Solution","text":"Solution{Tx, Tf}\n\nSolution type for optimization models. \n\n\n\n\n\n","category":"type"},{"location":"#Optini.StaticInitial","page":"Home","title":"Optini.StaticInitial","text":"StaticInitial{T} <: AbstractInitial{T}\n\nStatic initial α₀ for line search methods. Newton and quasi-Newton algorithms for instance should use α₀ = 1 as the initial guess.\n\n\n\n\n\n","category":"type"},{"location":"#Optini.StaticInitial-2","page":"Home","title":"Optini.StaticInitial","text":"StaticInitial([α=1.0])\n\nInitialize StaticInitial{T}.\n\n\n\n\n\n","category":"type"},{"location":"#Optini.StaticLineSearch","page":"Home","title":"Optini.StaticLineSearch","text":"StaticLineSearch\n\nStaticLineSearch directly uses the initial guess as the new step length.\n\n\n\n\n\n","category":"type"},{"location":"#Optini.Steepest","page":"Home","title":"Optini.Steepest","text":"Steepest\n\nSteepest dispatches to the opposite of the gradient direction for LineSearch.\n\n\n\n\n\n","category":"type"},{"location":"#Optini.StrongWolfeLineSearch","page":"Home","title":"Optini.StrongWolfeLineSearch","text":"StrongWolfeLineSearch{C1, C2, S, T}\n\nStrongWolfeLineSearch computes a step length that satifies both the Armijo sufficient  decrease and the curvature conditions.\n\nFields\n\nc₁::C1: Armijo condition constant\nc₂::C2: curvature condition constant\nscale::S: scale factor to expand step length bracket\nα_max::T: maximum step length\n\n\n\n\n\n","category":"type"},{"location":"#Optini.StrongWolfeLineSearch-Tuple{}","page":"Home","title":"Optini.StrongWolfeLineSearch","text":"StrongWolfeLineSearch(; kwargs...)\n\nInitiate StrongWolfeLineSearch.\n\nKeywords\n\nc1=1e-4: Armijo condition constant\n`c2=0.9: curvature condition constant\nscale=2.0: scale factor to expand step length bracket\nalphamax=100_000: maximum step length\n\n\n\n\n\n","category":"method"},{"location":"#Optini.TrustRegion","page":"Home","title":"Optini.TrustRegion","text":"TrustRegion{H, M, D, R<:Ref, E} <: MultivariateAlgorithm\n\nTrustRegion builds a quadratic model within a radius from the current point to approximate the objective function and uses the model to choose the next step.\n\nFields\n\nhessian::H: the method to compute or approximate the Hessian\nmethod::M<:AbstractTrustRegionMethod: the method to compute the appropriate next step\nΔ₀::D: the initial radius\nΔ::R: a Ref containing the current radius\nη::E: the threshold to control when TrustRegion will take a step\n\n\n\n\n\n","category":"type"},{"location":"#Optini.TrustRegion-Tuple{}","page":"Home","title":"Optini.TrustRegion","text":"TrustRegion(; kwargs...)\n\nInitiate TrustRegion algorithm.\n\nKeywords\n\nhessian=Newton(): the method to compute or approximate the Hessian\nmethod=TwoDimSubspace(): the method to compute the appropriate next step\ndelta=5.0: the initial radius\ndeltamax=100.0: the maximum radius\neta=0.1: the threshold to control when TrustRegion will take a step\n\n\n\n\n\n","category":"method"},{"location":"#Optini.UnivariateAlgorithm","page":"Home","title":"Optini.UnivariateAlgorithm","text":"UnivariateAlgorithm\n\nAbstract supertype of univariate optimization algorithms.\n\n\n\n\n\n","category":"type"},{"location":"#Optini.bracket-Union{Tuple{Function}, Tuple{T}, Tuple{Function,T}} where T<:AbstractFloat","page":"Home","title":"Optini.bracket","text":"bracket(f::Function, x::T=0.0; kwargs...) where {T<:AbstractFloat}\n\nCreate a bracket around a local minimum from the intial point x. Return the bracket in a  tuple if successful, and nothing otherwise. \n\nKeywords\n\nstep=0.01: the step size to expand the bracket\nscale=2.0: the scale factor for step size at each iteration\nmaxiter::Integer=100: the maximum number of iterations\n\n\n\n\n\n","category":"method"},{"location":"#Optini.optimize-Tuple{Function,Real,Real}","page":"Home","title":"Optini.optimize","text":"optimize(f::Function, lower::Real, upper::Real; kwargs...)\n\nCompute the minimizer of the function f using the bracket (lower, upper).\n\nKeywords\n\nalg::UnivariateAlgorithm=GoldenSection(): the algorithm choice\nreltol=sqrt(eps(T)): relative tolerance\nabstol=eps(T): absolute tolerance\nmaxiter::Integer=1_000: maximum numer of iterations\n\n\n\n\n\n","category":"method"}]
}
